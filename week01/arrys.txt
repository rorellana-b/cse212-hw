static void DoSomething(int n)
{
  for (int i = 0; i < n; i++)
  {
    Console.WriteLine(n * n);
  }

  for (i = n; i > 0; i--)
  {
    Console.WriteLine(n * n * n);
  }
}


O(n) Becuase they are not nested loops, the time complexity is linear. The first loop runs n times and the second loop also runs n times, but they are not dependent on each other.

static void DoSomethingElse(List<string> words)
{
  for (int i = 0; i < words.Count; i++)
  {
    for (int j = 0; j < words.Count; j++)
    {
      Console.WriteLine(".");
    }
  }
}

// O(n^2) Because the loops are nested, the time complexity is quadratic. The outer loop runs n times, and for each iteration of the outer loop, the inner loop also runs n times, resulting in n * n = n^2 total iterations.

static void DoAnotherThing(List<string> words)
{
  string sentence = "The quick brown fox jumps over the lazy dog";
  for (int i = 0; i < words.Count; i++)
  {
    for (int j = 0; j < sentence.Length; j++)
    {
      Console.WriteLine(".");
    }
  }
}

O(n) Because the outer loop runs n times (where n is the number of words), and the inner loop runs a constant number of times (the length of the sentence, which does not depend on n), the overall time complexity is linear with respect to the number of words. The inner loop does not scale with n, so it does not contribute to a higher order of complexity.


